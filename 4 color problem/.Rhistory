breast_RepCV_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_RepCV, par.set = Kvals, control = ctrl, measures=mmce)
Result_RepCV <- generateHyperParsEffectData(breast_RepCV_tune)$data
# b
plot(Result_holdout, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), main = "Comparison of Different CV Method")
Result_RepCV
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35))
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35))
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35))
axis(1, 1:35 ,las = 1)
legend("right", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 2, col = 2)
axis(1, 1:35 ,las = 1)
legend("right", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("right", legend = c(1:4), pch = c(1:4), col = c(1:4), bg ="white")
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 3, col = 3)
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.27), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("right", legend = c(1:4), pch = c(1:4), col = c(1:4), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("right", legend = c(1:4), pch = c(1:4), col = c(1:4), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("right", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
Result_10CV
Result_LOO
Result_holdout
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 35), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), xlim = c(0, 30), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
# c
breast_lrn_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_holdout_tune$x)
View(breast_lrn_tuned)
breast_lrn_tuned
# c
breast_holdout_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_holdout_tune$x)
breast_LOO_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_LOO_tune$x)
breast_10CV_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_10CV_tune$x)
breast_RepCV_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_RepCV_tune$x)
summary(breast_10CV_tune)
# m
set.seed(303)
Result_rcv <- mat.or.vec(5, 30)
for(i in 1:5){
for(j in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
Result_rcv[i,j] <- cv_val$aggr
}
}
plot(Result_cv, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), main = "Comparison of 10-fold Cross Validation")
for(i in 1:5){
par(new = T)
plot(Result_rcv[i,], type = "b", col = i, pch = i+1, xlab = "", ylab = "", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), yaxt = "n")
}
axis(1, 1:35 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
breast_RepCV_tune
breast_10CV_tune
breast_LOO_tune
breast_holdout_tune
# a
set.seed(303)
breast.tsk <- makeClassifTask(id = "Breast Cancer Recurrence", data = breast[, c("recurrence", "deg_malig", "inv_nodes_quant")], target = "recurrence")
Kvals <- makeParamSet(makeDiscreteParam("k", values = 1:30))
breast_holdout <- makeResampleDesc("Holdout", stratify=TRUE)
breast_LOO <- makeResampleDesc("LOO")
breast_10CV <- makeResampleDesc("CV", iters = 10L, stratify=TRUE)
breast_RepCV <- makeResampleDesc("RepCV", reps=5L, folds = 10L, stratify=TRUE)
ctrl <- makeTuneControlGrid()
breast_holdout_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_holdout, par.set = Kvals, control = ctrl, measures=mmce)
Result_holdout <- generateHyperParsEffectData(breast_holdout_tune)$data
breast_LOO_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_LOO, par.set = Kvals, control = ctrl, measures=mmce)
Result_LOO <- generateHyperParsEffectData(breast_LOO_tune)$data
breast_10CV_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_10CV, par.set = Kvals, control = ctrl, measures=mmce)
Result_10CV <- generateHyperParsEffectData(breast_10CV_tune)$data
breast_RepCV_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_RepCV, par.set = Kvals, control = ctrl, measures=mmce)
Result_RepCV <- generateHyperParsEffectData(breast_RepCV_tune)$data
# b
plot(Result_holdout$mmce.test.mean, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), pch = 1, col = 1, main = "Comparison of Different CV Method")
par(new = T)
plot(Result_LOO$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", xlab = "", ylab = "", ylim = c(0.22, 0.3), pch = 2, col = 2)
par(new = T)
plot(Result_10CV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3), xlab = "", ylab = "",pch = 3, col = 3)
par(new = T)
plot(Result_RepCV$mmce.test.mean, type = "b", xaxt = "n", yaxt = "n", ylim = c(0.22, 0.3),xlab = "", ylab = "",pch = 4, col = 4)
axis(1, 1:35 ,las = 1)
legend("top", legend = c("Single", "LOO", "10CV", "RepCV"), pch = c(1:4), col = c(1:4), bg ="white", horiz = T)
# c
breast_holdout_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_holdout_tune$x)
breast_LOO_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_LOO_tune$x)
breast_10CV_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_10CV_tune$x)
breast_RepCV_tuned <- setHyperPars(makeLearner("classif.knn"), par.vals = breast_RepCV_tune$x)
plot(Result[,1], type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.3), main = "Comparsion of different splits")
for(i in 1:5){
par(new = T)
plot(Result_mmce[,i], type = "b", col = i, pch = i+1, xlab = "", ylab = "", xaxt = "n", ylim = c(0.22, 0.3), yaxt = "n")
}
axis(1, 1:30 ,las = 1)
legend("bottom", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
result_holdout_r <- mat.or.vec()
# d
set.seed(303)
Result_holdout_r <- mat.or.vec(0,30)
Result_LOO_r <- mat.or.vec(0,30)
Result_10CV_r <- mat.or.vec(0,30)
Result_RepCV_r <- mat.or.vec(0,30)
for(i in 1:5){
breast_holdout_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_holdout, par.set = Kvals, control = ctrl, measures=mmce)
Result_holdout <- generateHyperParsEffectData(breast_holdout_tune)$data
Result_holdout_r <- rbind(Result_holdout_r, Result_holdout$mmce.test.mean)
breast_LOO_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_LOO, par.set = Kvals, control = ctrl, measures=mmce)
Result_LOO <- generateHyperParsEffectData(breast_LOO_tune)$data
Result_LOO_r <- rbind(Result_LOO_r, Result_LOO$mmce.test.mean)
breast_10CV_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_10CV, par.set = Kvals, control = ctrl, measures=mmce)
Result_10CV <- generateHyperParsEffectData(breast_10CV_tune)$data
Result_10CV_r <- rbind(Result_10CV_r, Result_10CV$mmce.test.mean)
breast_RepCV_tune <- tuneParams("classif.knn", task = breast.tsk, resampling = breast_RepCV, par.set = Kvals, control = ctrl, measures=mmce)
Result_RepCV <- generateHyperParsEffectData(breast_RepCV_tune)$data
Result_RepCV_r <- rbind(Result_RepCV_r, Result_RepCV$mmce.test.mean)
}
View(Result_10CV_r)
View(Result_10CV)
View(Result_holdout_r)
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "", ylab = "", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), yaxt = "n")
par(new = T)
}
axis(1, 1:35 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27))
par(new = T)
}
axis(1, 1:30 ,las = 1)
axis(2, 0.2:0.3)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.2, 0.3))
par(new = T)
}
axis(1, 1:30 ,las = 1)
axis(2, 0.2:0.3)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", yaxt = "n", ylim = c(0.2, 0.3))
par(new = T)
}
axis(1, 1:30 ,las = 1)
axis(2, 0.2:0.3)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", yaxt = "n", ylim = c(0.2, 0.3))
par(new = T)
}
axis(1, 1:30 ,las = 1)
axis(2, 0.2:0.3, las = 0.01)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", yaxt = "n", ylim = c(0.2, 0.3))
par(new = T)
}
axis(1, 1:30 ,las = 1)
axis(2, c(0.2:0.3), las = 0.01)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.2, 0.3))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.1, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.35))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T)
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4))
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of Single Split")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of LOO")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of 10CV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of RepCV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white", horiz = T, bty = "n")
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of Single Split")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of LOO")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of 10CV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white", horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of RepCV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), bg ="white", horiz = T, bty = "n")
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of Single Split")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of LOO")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of 10CV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of RepCV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i+1, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of Single Split")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of LOO")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of 10CV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of RepCV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
par(mfrow = c(2, 2))
for(i in 1:5){
plot(Result_holdout_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of Single Split")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_LOO_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of LOO")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_10CV_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of 10CV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
for(i in 1:5){
plot(Result_RepCV_r[i,], type = "b", col = i, pch = i, xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.15, 0.4), main = "Comparision of RepCV")
par(new = T)
}
axis(1, 1:30 ,las = 1)
legend("top", legend = c(1:5), pch = c(1:5), col = c(1:5), horiz = T, bty = "n")
# m
set.seed(303)
Result_rcv <- mat.or.vec(5, 30)
for(i in 1:5){
for(j in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
Result_rcv[i,j] <- cv_val$aggr
}
}
plot(Result_cv, type = "b", xlab = "k", ylab = "MMCE", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), main = "Comparison of 10-fold Cross Validation")
for(i in 1:5){
par(new = T)
plot(Result_rcv[i,], type = "b", col = i, pch = i+1, xlab = "", ylab = "", xaxt = "n", ylim = c(0.22, 0.27), xlim = c(0, 35), yaxt = "n")
}
axis(1, 1:35 ,las = 1)
legend("right", legend = c("ref", 1:5), pch = c(1:6), col = c("black", 1:5), bg ="white")
