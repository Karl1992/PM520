breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
breast.tsk <- makeClassifTask(id = "Breast Cancer Recurrence", data = breast[, c("recurrence", "deg_malig","inv_nodes_quant")], target = "recurrence")
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
breast.tsk <- makeClassifTask(id = "Breast Cancer Recurrence", data = breast[, c("recurrence", "deg_malig","inv_nodes_quant")], target = "recurrence")
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
#install.packages("mlr")
library("mlr")
setwd("D:/study/MasterinUSC/PM591/week4")
breast <- read.csv("breast-cancer.data.txt",header = T)
breast <- breast[complete.cases(breast), ] #keeps complete cases only
levels(breast$recurrence) <- c("no-recurrence", "recurrence") #renames levels using shorter names
breast$age_quant <- as.integer(breast$age) # creates a quantitative age variable
breast$tumor_size_quant <- factor(breast$tumor_size, levels(breast$tumor_size)[c(1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11)]) #creates a quantitative tumor size variable
breast$tumor_size_quant <- as.integer(breast$tumor_size_quant)
breast$inv_nodes_quant <- factor(breast$inv_nodes, levels(breast$inv_nodes)[c(1, 5, 6, 7, 2, 3, 4)]) #creates a quantitative invasive nodes variable
breast$inv_nodes_quant <- as.integer(breast$inv_nodes_quant)
summarizeColumns(breast)
set.seed(303)
n <- nrow(breast)
trainset <- sample(n, floor(0.7 * n))
valset <- setdiff(1:n, trainset)
breast.tsk <- makeClassifTask(id = "Breast Cancer Recurrence", data = breast[, c("recurrence", "deg_malig","inv_nodes_quant")], target = "recurrence")
breast.tsk
breast.lrn <- makeLearner("classif.knn", k=1, fix.factors.prediction = TRUE)
summary(breast.lrn)
breast_1NN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_1NN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
performance(breast_predict, measures = list(mmce, acc)) #misclassification error and accuracy
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
breast.tsk <- makeClassifTask(id = "Breast Cancer Recurrence", data = breast[, c("recurrence", "deg_malig","inv_nodes_quant")], target = "recurrence")
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
remove(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
rm(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n")
axis(1, 1:30, las = 1)
rm(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = k, ylab = "Misclassificaiton Error")
rm(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k"", ylab = "Misclassificaiton Error")
rm(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
rm(i)
k_number <- seq(1,30, by = 1)
result <- mat.or.vec(0,2)
for(i in k_number){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
result <- mat.or.vec(0,2)
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k=i, fix.factors.prediction = TRUE)
breast_kNN <- train(breast.lrn, breast.tsk, subset = trainset)
breast_predict <- predict(breast_kNN, task = breast.tsk, subset = valset)
calculateConfusionMatrix(breast_predict)
result <- rbind(result, performance(breast_predict, measures = list(mmce, acc)))
}
result
plot(result[,1],xaxt = "n", xlab = "k", ylab = "Misclassificaiton Error")
axis(1, 1:30, las = 1)
breast.lrn <- makeLearner("classif.knn", k = 1, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
cv_val
cv_val$aggr
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
cat("\n k=", i, cv_val$aggr)
}
result2 <- numeric()
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
result2[i] <- cv_val$aggr
}
result2
selection <- which(result2 == min(result2))
selection
result2 <- numeric()
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
result2[i] <- cv_val$aggr
}
result2
selection <- which(result2 == min(result2))
selection
plot(result2, xaxt = "n", xlab = "k", ylab = "Mean MMCE")
axis(1, 1:30, las = 1)
result2 <- numeric()
for(i in 1:30){
breast.lrn <- makeLearner("classif.knn", k = i, fix.factors.prediction = T)
cv_val <- crossval(breast.lrn, breast.tsk, iters = 10L, stratify = T, measures = mmce)
result2[i] <- cv_val$aggr
}
result2
selection <- which(result2 == min(result2))
selection
plot(result2, xaxt = "n", xlab = "k", ylab = "Mean MMCE")
axis(1, 1:30, las = 1)
knitr::opts_chunk$set(echo = TRUE)
# Install FNN package
library("FNN")
setwd("D:/study/MasterinUSC/PM591/week2/homework")
brain <- read.table("brain.txt", header = T)
set.seed(2018)
n <- nrow(brain)
training_set <- sample(1:n, floor(0.7 * n))
brain_train <- brain[training_set,]
brain_val <- brain[-training_set,]
k_number <- c(1:15)
RMSE <- numeric()
for (i in k_number){
fit_lNN <- knn.reg(train = brain_train[,-4], test = brain_val[,-4], y = brain_train$Brain.weight, k = i)
RMSE[i] <- sqrt(sum((brain_val$Brain.weight - fit_lNN$pred)^2)/nrow(brain_val))
}
plot(y = RMSE, x = k_number, xlab = "k")
axis(1, 1:15, las = 1)
cat("\nAccording to plot, I will choose k = 6 since when k = 6 we can get the least RMSE, which is", RMSE[6])
setwd("D:/study/MasterinUSC/PM591/week4")
breast <- read.csv("breast-cancer.data.txt", header=T)
levels(breast$recurrence) <- c("no-recurrence", "recurrence") #renames levels using shorter names
breast$age_quant <- as.integer(breast$age) # creates a quantitative age variable
breast$tumor_size_quant <- factor(breast$tumor_size, levels(breast$tumor_size)[c(1,10,2,3,4,5,6,7,8,9,11)]) #creates a quantitative tumor size variable
breast$tumor_size_quant <- as.integer(breast$tumor_size_quant)
breast$inv_nodes_quant <- factor(breast$inv_nodes, levels(breast$inv_nodes)[c(1,5,6,7,2,3,4)]) #creates a quantitative invasive nodes variable
breast$inv_nodes_quant <- as.integer(breast$inv_nodes_quant)
breast <- breast[complete.cases(breast), ] #keeps complete cases only
# a
set.seed(2018)
n <- nrow(breast)
trainingset <- sample(1:n, floor(0.7 * n))
breast_train <- breast[trainingset,]
breast_val <- breast[-trainingset,]
str(breast_train)
# b
plot(breast_train$recurrence, breast_train$age_quant)
plot(breast_train$recurrence,breast_train$tumor_size_quant)
plot(breast_train$recurrence,breast_train$inv_nodes_quant)
plot(breast_train$recurrence,breast_train$deg_malig)
plot(breast_train$menopause, breast_train$recurrence)
plot(breast_train$node_caps, breast_train$recurrence)
plot(breast_train$side, breast_train$recurrence)
plot(breast_train$quadrant, breast_train$recurrence)
plot(breast_train$irradiat, breast_train$recurrence)
# c
library(MASS)
breast_lda1 <- lda(recurrence ~ inv_nodes_quant, data = breast_train)
breast_lda2 <- lda(recurrence ~ deg_malig + inv_nodes_quant, data = breast_train)
breast_lda3 <- lda(recurrence ~ deg_malig + node_caps + inv_nodes_quant, data = breast_train)
breast_lda4 <- lda(recurrence ~ age_quant + tumor_size_quant + inv_nodes_quant + deg_malig + menopause + node_caps + side + quadrant + irradiat, data = breast_train)
# d
classificationError <- function(breast_lda, data){
predict_breast_lda <- predict(breast_lda, newdata = data)
confMatrix <- table(true = data$recurrence, predicted = predict_breast_lda$class)
error <- (confMatrix[1,2] + confMatrix[2,1]) / nrow(data)
sens <- confMatrix[2,2] / (confMatrix[2,1] + confMatrix[2,2])
spec <- confMatrix[1,1] / (confMatrix[1,1] + confMatrix[1,2])
return(c(error=error, sensitivity=sens, specificity=spec))
}
# e
breast_train_error1 <- classificationError(breast_lda1, breast_train)
breast_train_error2 <- classificationError(breast_lda2, breast_train)
breast_train_error3 <- classificationError(breast_lda3, breast_train)
breast_train_error4 <- classificationError(breast_lda4, breast_train)
breast_test_error1 <- classificationError(breast_lda1, breast_val)
breast_test_error2 <- classificationError(breast_lda2, breast_val)
breast_test_error3 <- classificationError(breast_lda3, breast_val)
breast_test_error4 <- classificationError(breast_lda4, breast_val)
breast_test_error <- rbind(breast_test_error1, breast_test_error2 ,breast_test_error3 ,breast_test_error4)
breast_train_error <- rbind(breast_train_error1, breast_train_error2 ,breast_train_error3 ,breast_train_error4)
breast_train_error
breast_test_error
# f
plot(breast_test_error[,1], x = 1:4, ylab = "Error", xlab = "Classifier Complexity", col = "red", ylim = c(0.1,0.4), xaxt = "n", main = "Error vs. Classifier of training set and test set", type = "b")
par(new = T)
plot(breast_train_error[,1], x = 1:4, ylab = "", xlab = "", col = "blue", ylim = c(0.1,0.4), xaxt = "n", type = "b")
legend("topright", legend = c("Red: Test", "Blue: Train"), text.col = c("red", "blue"))
axis(1, 1:4, las = 1)
# g
plot(breast_test_error[,2], x = 1:4, ylab = "Sensitivity", xlab = "Classifier Complexity", col = "red", ylim = c(0,0.5), xaxt = "n", main = "Sensitivity vs. Classifier of training set and test set", type = "b")
par(new = T)
plot(breast_train_error[,2], x = 1:4, ylab = "", xlab = "", col = "blue", ylim = c(0,0.5), xaxt = "n", type = "b")
legend("topright", legend = c("Red: Test", "Blue: Train"), text.col = c("red", "blue"))
axis(1, 1:4, las = 1)
# g
plot(breast_test_error[,3], x = 1:4, ylab = "Specificity", xlab = "Classifier Complexity", col = "red", ylim = c(0.8, 1), xaxt = "n", main = "Specificity vs. Classifier of training set and test set", type = "b")
par(new = T)
plot(breast_train_error[,3], x = 1:4, ylab = "", xlab = "", col = "blue", ylim = c(0.8, 1), xaxt = "n", type = "b")
legend("topright", legend = c("Red: Test", "Blue: Train"), text.col = c("red", "blue"))
axis(1, 1:4, las = 1)
# h
breast_glm_total <- breast
breast_glm_total$recurrence <- relevel(breast_glm_total$recurrence, ref = "no-recurrence")
breast_glm_train <- breast_glm_total[trainingset,]
breast_glm_val <- breast_glm_total[-trainingset,]
breast_glm <- glm(recurrence ~ age_quant + tumor_size_quant + inv_nodes_quant + deg_malig + menopause + node_caps + side + quadrant + irradiat, family = "binomial", data = breast_glm_train)
summary(breast_glm)
# i
breast_glm_1 <- glm(recurrence ~ deg_malig, family = "binomial", data = breast_glm_train)
breast_glm_2 <- glm(recurrence ~ deg_malig + inv_nodes_quant, family = "binomial", data = breast_glm_train)
breast_glm_3 <- glm(recurrence ~ deg_malig + inv_nodes_quant + irradiat, family = "binomial", data = breast_glm_train)
breast_glm_4 <- glm(recurrence ~ age_quant + tumor_size_quant + inv_nodes_quant + deg_malig + menopause + node_caps + side + quadrant + irradiat , family = "binomial", data = breast_glm_train)
# j
# redefine a function
classificationError_simple <- function(predict_set, true_set){
confMatrix <- table(true = true_set$recurrence, predicted = predict_set)
error <- (confMatrix[1,2] + confMatrix[2,1]) / nrow(true_set)
sens <- confMatrix[2,2] / (confMatrix[2,1] + confMatrix[2,2])
spec <- confMatrix[1,1] / (confMatrix[1,1] + confMatrix[1,2])
return(c(error=error, sensitivity=sens, specificity=spec))
}
pred_glm_train1 <- factor(predict(breast_glm_1, newdata = breast_glm_train, type = "response") > 0.5)
levels(pred_glm_train1) <- c("no-recurrence", "recurrence")
glm_error_train1 <- classificationError_simple(pred_glm_train1, breast_glm_train)
pred_glm_train2 <- factor(predict(breast_glm_2, newdata = breast_glm_train, type = "response") > 0.5)
levels(pred_glm_train2) <- c("no-recurrence", "recurrence")
glm_error_train2 <- classificationError_simple(pred_glm_train2, breast_glm_train)
pred_glm_train3 <- factor(predict(breast_glm_3, newdata = breast_glm_train, type = "response") > 0.5)
levels(pred_glm_train3) <- c("no-recurrence", "recurrence")
glm_error_train3 <- classificationError_simple(pred_glm_train3, breast_glm_train)
pred_glm_train4 <- factor(predict(breast_glm_4, newdata = breast_glm_train, type = "response") > 0.5)
levels(pred_glm_train4) <- c("no-recurrence", "recurrence")
glm_error_train4 <- classificationError_simple(pred_glm_train4, breast_glm_train)
pred_glm_val1 <- factor(predict(breast_glm_1, newdata = breast_glm_val, type = "response") > 0.5)
levels(pred_glm_val1) <- c("no-recurrence", "recurrence")
glm_error_val1 <- classificationError_simple(pred_glm_val1, breast_glm_val)
pred_glm_val2 <- factor(predict(breast_glm_2, newdata = breast_glm_val, type = "response") > 0.5)
levels(pred_glm_val2) <- c("no-recurrence", "recurrence")
glm_error_val2 <- classificationError_simple(pred_glm_val2, breast_glm_val)
pred_glm_val3 <- factor(predict(breast_glm_3, newdata = breast_glm_val, type = "response") > 0.5)
levels(pred_glm_val3) <- c("no-recurrence", "recurrence")
glm_error_val3 <- classificationError_simple(pred_glm_val3, breast_glm_val)
pred_glm_val4 <- factor(predict(breast_glm_4, newdata = breast_glm_val, type = "response") > 0.5)
levels(pred_glm_val4) <- c("no-recurrence", "recurrence")
glm_error_val4 <- classificationError_simple(pred_glm_val4, breast_glm_val)
glm_error_train <- rbind(glm_error_train1, glm_error_train2, glm_error_train3, glm_error_train4)
glm_error_val <- rbind(glm_error_val1, glm_error_val2, glm_error_val3, glm_error_val4)
glm_error_train
glm_error_val
# k
# install.packages("pROC")
library("pROC")
pred_auc_train1 <- predict(breast_glm_1, newdata = breast_glm_train, type = "response")
auc1_train <- auc(response = as.numeric(breast_glm_train$recurrence == "recurrence"), predictor = pred_auc_train1)
pred_auc_train2 <- predict(breast_glm_2, newdata = breast_glm_train, type = "response")
auc2_train <- auc(response = as.numeric(breast_glm_train$recurrence == "recurrence"), predictor = pred_auc_train2)
pred_auc_train3 <- predict(breast_glm_1, newdata = breast_glm_train, type = "response")
auc3_train <- auc(response = as.numeric(breast_glm_train$recurrence == "recurrence"), predictor = pred_auc_train3)
pred_auc_train4 <- predict(breast_glm_1, newdata = breast_glm_train, type = "response")
auc4_train <- auc(response = as.numeric(breast_glm_train$recurrence == "recurrence"), predictor = pred_auc_train4)
pred_auc_val1 <- predict(breast_glm_1, newdata = breast_glm_val, type = "response")
auc1_val <- auc(response = as.numeric(breast_glm_val$recurrence == "recurrence"), predictor = pred_auc_val1)
pred_auc_val2 <- predict(breast_glm_2, newdata = breast_glm_val, type = "response")
auc2_val <- auc(response = as.numeric(breast_glm_val$recurrence == "recurrence"), predictor = pred_auc_val2)
pred_auc_val3 <- predict(breast_glm_3, newdata = breast_glm_val, type = "response")
auc3_val <- auc(response = as.numeric(breast_glm_val$recurrence == "recurrence"), predictor = pred_auc_val3)
pred_auc_val4 <- predict(breast_glm_4, newdata = breast_glm_val, type = "response")
auc4_val <- auc(response = as.numeric(breast_glm_val$recurrence == "recurrence"), predictor = pred_auc_val4)
auc_train <- c(auc1_train, auc2_train, auc3_train, auc4_train)
auc_val <- c(auc1_val, auc2_val, auc3_val, auc4_val)
auc_train
auc_val
# l
plot(glm_error_val[,1], x = 1:4, ylab = "Misclassifcaiton Error", xlab = "Classifier Complexity", col = "red", ylim = c(0, 0.5), xaxt = "n", main = "Misclassifcaiton Error vs. Classifier of training set and test set", type = "b")
par(new = T)
plot(glm_error_train[,1], x = 1:4, ylab = "", xlab = "", col = "blue", ylim = c(0, 0.5), xaxt = "n", type = "b")
legend("topright", legend = c("Red: Test", "Blue: Train"), text.col = c("red", "blue"))
axis(1, 1:4, las = 1)
plot(auc_val, x = 1:4, ylab = "AUC", xlab = "Classifier Complexity", col = "red", ylim = c(0.5, 1), xaxt = "n", main = "AUC vs. Classifier of training set and test set", type = "b")
par(new = T)
plot(auc_train, x = 1:4, ylab = "", xlab = "", col = "blue", ylim = c(0.5, 1), xaxt = "n", type = "b")
legend("topright", legend = c("Red: Test", "Blue: Train"), text.col = c("red", "blue"))
axis(1, 1:4, las = 1)
true_negative_rate <- pnorm(1/2, -1, 1)
false_negative_rate <- pnorm(1/2, 2, 1)
true_positive_rate <- 1 - false_negative_rate
false_positive_rate <- 1 - true_negative_rate
sensitivity <- true_positive_rate / 1
specificity <- true_negative_rate / 1
overall_misclassificaiton_rate <- (false_negative_rate + false_positive_rate) / 2
cat("\nSpecificity is", specificity, ", sensitivity is", sensitivity, ", false positive rate is", false_positive_rate, ", false negative rates is", false_negative_rate, "and overall misclassification rate is", overall_misclassificaiton_rate, "for the Bayes rule.")
t <- seq(-4, 6, length.out = 21)
result <- mat.or.vec(0,3)
for(i in t){
true_negative_rate <- pnorm(i, -1, 1)
false_negative_rate <- pnorm(i, 2, 1)
true_positive_rate <- 1 - false_negative_rate
false_positive_rate <- 1 - true_negative_rate
sensitivity <- true_positive_rate / (true_positive_rate + false_negative_rate)
specificity <- true_negative_rate / (true_negative_rate + false_positive_rate)
overall_misclassificaiton_rate <- (false_negative_rate + false_positive_rate) / 2
result <- rbind(result, c(sensitivity, specificity, overall_misclassificaiton_rate))
cat("\nSpecificity is", specificity, ", sensitivity is", sensitivity, ", false positive rate is", false_positive_rate, ", false negative rates is", false_negative_rate, "and overall misclassification rate is", overall_misclassificaiton_rate, "for t=",i, ".")
}
plot(x = t, y = result[,1], type = "b", col = "red", xlab = "", ylab = "", ylim = c(0,1.5), xaxt = "n", yaxt = "n")
par(new = T)
plot(x = t, y = result[,2], type = "b", col = "blue", xlab = "", ylab = "", ylim = c(0,1.5), xaxt = "n", yaxt = "n")
par(new = T)
plot(x = t, y = result[,3], type = "b", col = "black", ylab = "Sens, Spec and Misclassification", ylim = c(0,1.5))
legend("topright", legend = c("Red: Sensitivity", "Blue: Specificity", "Black: Misclassification"), text.col = c("red", "blue", "black"))
abline(v = 1/2, col = "grey", lwd = 2)
plot(x = result[,2], y = result[,1], type = "l", xlim = c(1,0), xlab = "specificity", ylab = "sensitivity", main = "ROC curve", col = "red", lwd = 2)
abline(1, -1, col = "grey", lwd = 2)
